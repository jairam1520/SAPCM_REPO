<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<exportmultiplex category="Template" ref_path="workflow_data[Internal]/storable[workflow_data]/storable[Data]">
   <storable name="Audit Profile" null="true"/>
   <int name="Cancel batch count" value="0"/>
   <int name="Cancel batch type" value="0"/>
   <list classname="java.util.ArrayList" name="Comments"/>
   <storable name="Data Veracity Profile" null="true"/>
   <storable name="Error UDR type name" null="true"/>
   <boolean name="Error batch type" value="false"/>
   <string name="Error code" null="true"/>
   <map name="Error map" null="true"/>
   <storable name="Execution Config" storable-id="dr.WorkflowExecutionConfig" ver="10.0">
      <enum name="debugType" storable-id="dr.DebugType" value="FILE"/>
      <storable name="executionSettings" storable-id="dr.ExecutionSettings" ver="11.0">
         <boolean name="enabled" value="false"/>
         <storable name="kafka" null="true"/>
      </storable>
      <int name="noOfFilesToKeep" value="-1"/>
      <string name="throughputMIM" null="true"/>
      <string name="txnHandler" value="Default Handler"/>
   </storable>
   <list classname="java.util.ArrayList" name="Field Types"/>
   <boolean name="Log On CB" value="false"/>
   <list classname="java.util.ArrayList" name="Logged error MIM"/>
   <list classname="java.util.ArrayList" name="Nodes">
      <storable name="0" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname"><![CDATA[com.digitalroute.pythonagents.agent.PythonBatchCollectionAgentInsp]]></string>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="1">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname"><![CDATA[com.digitalroute.pythonagents.agent.PythonBatchCollectionAgentInsp]]></string>
               <storable name="Data" storable-id="dr.PythonAgentData" ver="10.0">
                  <array name="inputTypes" null="true"/>
                  <storable name="interpreter" null="true"/>
                  <array name="mims" null="true"/>
                  <array classname="com.digitalroute.pythonagents.OutputTypeInfo" name="outputTypes" size="3">
                     <storable name="0" storable-id="dr.PythonOutputTypeInfo" ver="1.0">
                        <string name="route" null="true"/>
                        <storable name="udrTypeInfo" storable-id="dr.DRTypeInfo" ver="1.0">
                           <string name="TypeName" value="bytearray"/>
                        </storable>
                     </storable>
                     <storable name="1" storable-id="dr.PythonOutputTypeInfo" ver="1.0">
                        <string name="route" null="true"/>
                        <storable name="udrTypeInfo" storable-id="dr.DRTypeInfo" ver="1.0">
                           <string name="TypeName" value="DRUDR"/>
                        </storable>
                     </storable>
                     <storable name="2" storable-id="dr.PythonOutputTypeInfo" ver="1.0">
                        <string name="route" null="true"/>
                        <storable name="udrTypeInfo" storable-id="dr.UltraClientInfo" ver="1.0">
                           <string name="FormatName" value="SAPCM_PYTHON.UFL_Reddit"/>
                           <string name="TypeName" value="SAPCM_PYTHON.UFL_Reddit.RedditPost"/>
                        </storable>
                     </storable>
                  </array>
                  <string name="sourceCode"><![CDATA[import praw
import time
from ultra.SAPCM_PYTHON.UFL_Reddit import RedditPost, Comment

reddit = praw.Reddit(
    client_id="rXXIn0czRGHNP0wIfeZrBw",
    client_secret="g3VZS5Vt2WqJgbo6prnQwWX656augw",
    user_agent="script:reddit_fetch:v1.0 (by u/Jai)"
)

# Global cache for user avatars
user_cache = {}

def build_comment_udr(reddit_comment):
    """Convert a PRAW comment into internal Comment UDR (single object, no replies)."""
    cm_comment = udrCreate(Comment)
    cm_comment.id = reddit_comment.id
    cm_comment.text = reddit_comment.body
    cm_comment.author = reddit_comment.author.name if reddit_comment.author else "[deleted]"
    cm_comment.time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(reddit_comment.created_utc))

    # Votes
    cm_comment.upvotes = getattr(reddit_comment, "ups", 0)
    cm_comment.downvotes = getattr(reddit_comment, "downs", 0)
    cm_comment.score = reddit_comment.score

    # Profile picture
    if reddit_comment.author:
        author_name = reddit_comment.author.name
        if author_name in user_cache:
            cm_comment.profile_pic = user_cache[author_name]
        else:
            profile_pic = getattr(reddit_comment.author, "icon_img", "")
            user_cache[author_name] = profile_pic
            cm_comment.profile_pic = profile_pic
    else:
        cm_comment.profile_pic = ""

    return cm_comment


def collect_flat_comments(reddit_comment, flat_list, depth=1, max_depth=2):
    """Recursively collect all comments and replies into a flat list."""
    cm_comment = build_comment_udr(reddit_comment)
    flat_list.append(cm_comment)

    # Only go deeper if within max depth
    if depth < max_depth:
        for reply in reddit_comment.replies[:3]:   # limit replies per comment
            collect_flat_comments(reply, flat_list, depth + 1, max_depth)


def execute():
    beginBatch()

    subreddit = reddit.subreddit("AskReddit")

    for post in subreddit.hot(limit=1):
        print("==========================================")
        print("Title   :", post.title)
        print("Content :", post.selftext if post.selftext else "[No text content]")

        redditUdr = udrCreate(RedditPost)
        redditUdr.id = post.id
        redditUdr.title = post.title
        redditUdr.content = post.selftext if post.selftext else "[No text content]"
        redditUdr.author = post.author.name if post.author else "[deleted]"
        redditUdr.author_pic = getattr(post.author, "icon_img", "") if post.author else ""
        redditUdr.score = post.score
        redditUdr.upvotes = getattr(post, "ups", post.score)
        redditUdr.num_comments = post.num_comments
        redditUdr.url = post.url
        redditUdr.time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(post.created_utc))

        redditUdr.comments = []  # flat list of comments + replies

        # Ensure all comments are loaded
        post.comments.replace_more(limit=0)

        # Collect top-level + replies into one flat list
        for top_level_comment in post.comments[:3]:  # only top 3 comments
            collect_flat_comments(top_level_comment, redditUdr.comments)

        # Route UDR for downstream
        udrRoute(redditUdr)

    endBatch()
]]></string>
               </storable>
            </storable>
         </array>
         <string name="Name" value="Python_1"/>
      </storable>
      <storable name="1" storable-id="dr.WfNode" ver="2.0">
         <string name="Classname" value="com.digitalroute.wfc.analysis.StuffyMapperInsp"/>
         <array classname="com.digitalroute.wf.WfNodeConfig" name="Configuration" size="2">
            <storable name="0" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname" value="com.digitalroute.wfc.analysis.StuffyMapperInsp"/>
               <storable name="Data" storable-id="dr.StuffyMapperData" ver="10.0">
                  <string name="sourceCode"><![CDATA[consume {
    debug(input);
}]]></string>
                  <array classname="com.digitalroute.devkit.drudr.DRTypeInfo" name="udrTypes" size="3">
                     <storable name="0" storable-id="dr.DRTypeInfo" ver="1.0">
                        <string name="TypeName" value="bytearray"/>
                     </storable>
                     <storable name="1" storable-id="dr.DRTypeInfo" ver="1.0">
                        <string name="TypeName" value="DRUDR"/>
                     </storable>
                     <storable name="2" storable-id="dr.UltraClientInfo" ver="1.0">
                        <string name="FormatName" value="SAPCM_PYTHON.UFL_Reddit"/>
                        <string name="TypeName" value="SAPCM_PYTHON.UFL_Reddit.RedditPost"/>
                     </storable>
                  </array>
               </storable>
            </storable>
            <storable name="1" storable-id="dr.WfNodeConfig" ver="1.0">
               <string name="Classname" value="com.digitalroute.devkit.hidden.DRThreadBufferInsp"/>
               <storable name="Data" storable-id="dr.DRThreadBufferConfig" ver="10.0">
                  <boolean name="printStats" value="false"/>
                  <boolean name="useOwnThread" value="false"/>
               </storable>
            </storable>
         </array>
         <string name="Name" value="Analysis_1"/>
      </storable>
   </list>
   <list classname="java.util.ArrayList" name="Routes">
      <storable name="0" storable-id="dr.WfRoute" ver="2.0">
         <string name="Name" value="r_1"/>
         <int name="Realtime mode" value="0"/>
      </storable>
   </list>
   <list classname="java.util.ArrayList" name="Service"/>
   <boolean name="Template Valid" value="true"/>
</exportmultiplex>
