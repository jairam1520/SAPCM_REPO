{
  "Key": "DR1756398690832",
  "Name": "WFL_RedditFetch",
  "Type": "Workflow",
  "Version": 9,
  "Folder": "SAPCM_PYTHON",
  "Owner": "mzadmin",
  "Is Valid": true,
  "Access Groups -read -write -execute": [
    "Administrator",
    "Administrator",
    "Administrator"
  ],
  "Auxiliary Data": {
    "Entries": [
      {
        "Key": "Type",
        "Value": "Batch"
      },
      {
        "Key": "Standalone",
        "Value": "false"
      },
      {
        "Key": "Count",
        "Value": "1"
      },
      {
        "Key": "Autostart",
        "Value": "false"
      },
      {
        "Key": "DynamicConfig",
        "Value": "false"
      }
    ],
    "$Version": 2.0
  },
  "Data": {
    "auditLogOnCancelBatch": false,
    "cancelBatchType": "Abort immediately",
    "consecutiveCount": 0,
    "dynamicInstances": false,
    "errorMimNames": [],
    "fieldTypes": [],
    "instances": [
      {
        "cellValues": [],
        "instanceId": 1,
        "instanceName": "workflow_1",
        "validType": "Valid",
        "$Version": 1.0
      }
    ],
    "isErrorBatchTypeECS": false,
    "nodes": [
      {
        "Name": "Python_1",
        "ID": -1465262374,
        "Classname": "com.digitalroute.pythonagents.agent.PythonBatchCollectionAgentInsp",
        "Configuration": [
          {
            "Type": 1,
            "Classname": "com.digitalroute.pythonagents.agent.PythonBatchCollectionAgentInsp",
            "Data": {
              "outputTypes": [
                {
                  "udrTypeInfo": {
                    "typeName": "bytearray",
                    "$Version": 1.0
                  },
                  "$Version": 1.0
                },
                {
                  "udrTypeInfo": {
                    "typeName": "DRUDR",
                    "$Version": 1.0
                  },
                  "$Version": 1.0
                },
                {
                  "udrTypeInfo": {
                    "TypeName": "SAPCM_PYTHON.UFL_Reddit.RedditPost",
                    "FormatName": "SAPCM_PYTHON.UFL_Reddit",
                    "$Type": "dr.UltraClientInfo",
                    "$Version": 1.0
                  },
                  "$Version": 1.0
                }
              ],
              "sourceCode": "import praw
import time
from ultra.SAPCM_PYTHON.UFL_Reddit import RedditPost, Comment

reddit = praw.Reddit(
    client_id=\"rXXIn0czRGHNP0wIfeZrBw\",
    client_secret=\"g3VZS5Vt2WqJgbo6prnQwWX656augw\",
    user_agent=\"script:reddit_fetch:v1.0 (by u/Jai)\"
)

# Global cache for user avatars
user_cache = {}

def build_comment_udr(reddit_comment):
    \"\"\"Convert a PRAW comment into internal Comment UDR (single object, no replies).\"\"\"
    cm_comment = udrCreate(Comment)
    cm_comment.id = reddit_comment.id
    cm_comment.text = reddit_comment.body
    cm_comment.author = reddit_comment.author.name if reddit_comment.author else \"[deleted]\"
    cm_comment.time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(reddit_comment.created_utc))

    # Votes
    cm_comment.upvotes = getattr(reddit_comment, \"ups\", 0)
    cm_comment.downvotes = getattr(reddit_comment, \"downs\", 0)
    cm_comment.score = reddit_comment.score

    # Profile picture
    if reddit_comment.author:
        author_name = reddit_comment.author.name
        if author_name in user_cache:
            cm_comment.profile_pic = user_cache[author_name]
        else:
            profile_pic = getattr(reddit_comment.author, \"icon_img\", \"\")
            user_cache[author_name] = profile_pic
            cm_comment.profile_pic = profile_pic
    else:
        cm_comment.profile_pic = \"\"

    return cm_comment


def collect_flat_comments(reddit_comment, flat_list, depth=1, max_depth=2):
    \"\"\"Recursively collect all comments and replies into a flat list.\"\"\"
    cm_comment = build_comment_udr(reddit_comment)
    flat_list.append(cm_comment)

    # Only go deeper if within max depth
    if depth < max_depth:
        for reply in reddit_comment.replies[:3]:   # limit replies per comment
            collect_flat_comments(reply, flat_list, depth + 1, max_depth)


def execute():
    beginBatch()

    subreddit = reddit.subreddit(\"AskReddit\")

    for post in subreddit.hot(limit=1):
        print(\"==========================================\")
        print(\"Title   :\", post.title)
        print(\"Content :\", post.selftext if post.selftext else \"[No text content]\")

        redditUdr = udrCreate(RedditPost)
        redditUdr.id = post.id
        redditUdr.title = post.title
        redditUdr.content = post.selftext if post.selftext else \"[No text content]\"
        redditUdr.author = post.author.name if post.author else \"[deleted]\"
        redditUdr.author_pic = getattr(post.author, \"icon_img\", \"\") if post.author else \"\"
        redditUdr.score = post.score
        redditUdr.upvotes = getattr(post, \"ups\", post.score)
        redditUdr.num_comments = post.num_comments
        redditUdr.url = post.url
        redditUdr.time = time.strftime('%Y-%m-%d %H:%M:%S', time.gmtime(post.created_utc))

        redditUdr.comments = []  # flat list of comments + replies

        # Ensure all comments are loaded
        post.comments.replace_more(limit=0)

        # Collect top-level + replies into one flat list
        for top_level_comment in post.comments[:3]:  # only top 3 comments
            collect_flat_comments(top_level_comment, redditUdr.comments)

        # Route UDR for downstream
        udrRoute(redditUdr)

    endBatch()
",
              "$Type": "dr.PythonAgentData",
              "$Version": 10.0
            },
            "$Version": 1.0
          }
        ],
        "XYposition": {
          "x": 60,
          "y": 200,
          "$Version": 1.0
        },
        "$Version": 2.0
      },
      {
        "Name": "Analysis_1",
        "ID": -1939312021,
        "Classname": "com.digitalroute.wfc.analysis.StuffyMapperInsp",
        "Configuration": [
          {
            "Type": 1,
            "Classname": "com.digitalroute.wfc.analysis.StuffyMapperInsp",
            "Data": {
              "sourceCode": "consume {
    debug(input);
}",
              "udrTypes": [
                {
                  "typeName": "bytearray",
                  "$Version": 1.0
                },
                {
                  "typeName": "DRUDR",
                  "$Version": 1.0
                },
                {
                  "TypeName": "SAPCM_PYTHON.UFL_Reddit.RedditPost",
                  "FormatName": "SAPCM_PYTHON.UFL_Reddit",
                  "$Type": "dr.UltraClientInfo",
                  "$Version": 1.0
                }
              ],
              "$Type": "dr.StuffyMapperData",
              "$Version": 10.0
            },
            "$Version": 1.0
          },
          {
            "Type": 0,
            "Classname": "com.digitalroute.devkit.hidden.DRThreadBufferInsp",
            "Data": {
              "printStats": false,
              "useOwnThread": false,
              "$Type": "dr.DRThreadBufferConfig",
              "$Version": 10.0
            },
            "$Version": 1.0
          }
        ],
        "XYposition": {
          "x": 200,
          "y": 200,
          "$Version": 1.0
        },
        "$Version": 2.0
      }
    ],
    "routes": [
      {
        "destinationId": -1939312021,
        "id": -2,
        "name": "r_1",
        "realtimeMode": "Not set",
        "routeStyle": "Bezier",
        "sourceId": -1465262374,
        "stroke": [
          {
            "x": 90,
            "y": 180,
            "$Version": 1.0
          },
          {
            "x": 117,
            "y": 168,
            "$Version": 1.0
          },
          {
            "x": 143,
            "y": 168,
            "$Version": 1.0
          },
          {
            "x": 170,
            "y": 180,
            "$Version": 1.0
          }
        ],
        "$Version": 1.0
      }
    ],
    "services": [],
    "templateValid": true,
    "wfExecutionConfig": {
      "debugType": "File",
      "executionSettings": {
        "distributionType": "Round Robin",
        "enabled": false,
        "executionGroups": [],
        "$Version": 1.0
      },
      "noOfFilesToKeep": -1,
      "txnHandler": "Default Handler",
      "$Version": 10.0
    },
    "wfIdCounter": 1,
    "$Type": "dr.WorkflowBatchData",
    "$Version": 1.0
  },
  "documentation": "",
  "Is Dry Run": false,
  "$Type": "dr.Configuration",
  "$Version": 10.1
}